// Generated by CoffeeScript 1.7.1
(function() {
  "use strict";
  window.CategoryTree = (function() {
    function CategoryTree(dom_elem) {
      this.dom_elem = dom_elem;
      this.catdetails = document.category_details;
      this.notifications = document.notification_handler;
      this.loading = this.notifications.loading;
      this.catdetails.setCategoryTree(this);
      this.dynamic_sorting = document.config.dynamic_sorting ? true : false;
    }

    CategoryTree.prototype.initialize = function() {
      var endtime, jstree_options, jstree_plugins, starttime;
      starttime = new Date().getTime();
      this.loading.category_tree = true;
      this.notifications.checkDisplayLoading();
      jstree_plugins = ["json_data", "ui", "dnd", "crrm", "ui", "themes", "types", "cookies", "search"];
      if (!this.dynamic_sorting) {
        jstree_plugins.push("sort");
      }
      jstree_options = {
        types: {
          valid_children: ["root"],
          types: {
            loading: {
              icon: {
                image: "assets/jstree/themes/default/throbber.gif"
              }
            }
          }
        },
        ui: {
          select_limit: 1
        },
        search: {
          show_only_matches: true
        },
        core: {
          initially_open: "#node_root",
          animation: 300
        },
        themes: {
          theme: 'default'
        },
        crrm: {
          move: {
            check_move: (function(_this) {
              return function(m) {
                if (_this.dynamic_sorting) {
                  return true;
                } else {
                  if (m.np[0].id === m.op[0].id) {
                    return false;
                  } else {
                    return true;
                  }
                }
              };
            })(this)
          }
        },
        cookies: {
          save_opened: 'cat_jstree_open',
          save_selected: 'cat_jstree_select',
          save_loaded: 'cat_jstree_load'
        },
        json_data: {
          ajax: {
            url: "ajax/categories.php",
            cache: false,
            dataType: 'json',
            progressive_render: false,
            data: function(n) {
              return {
                id: n.attr ? n.attr("id") : 0
              };
            },
            complete: (function(_this) {
              return function() {
                _this.loading.category_tree = false;
                _this.notifications.checkDisplayLoading();
                return _this.addListenersTree();
              };
            })(this)
          }
        },
        dnd: {
          drop_target: false,
          drag_target: false
        },
        sort: function(a, b) {
          if (parseInt($(a).data('sort')) > parseInt($(b).data('sort'))) {
            return 1;
          } else {
            return -1;
          }
        },
        plugins: jstree_plugins
      };
      if ($.urlParam('cat')) {
        $.removeCookie('cat_jstree_select');
        jstree_options.ui.initially_select = "#node_" + $.escapeId($.urlParam('cat'));
      }
      this.dom_elem.jstree(jstree_options);
      endtime = new Date().getTime();
      console.log("Time to build the tree: " + (endtime - starttime) + " ms");
      return this.addListeners();
    };

    CategoryTree.prototype.addListenersTree = function() {
      this.addContextMenu();
      this.dom_elem.bind('hover_node.jstree', (function(_this) {
        return function(event, data) {
          var name_long, node;
          node = data.args[0];
          name_long = $(node).parent("li").data("name_long");
          if (!!name_long && name_long.length === 0) {
            return false;
          }
          $(node).tooltip({
            title: name_long,
            placement: 'right'
          });
          return $(node).tooltip('show');
        };
      })(this));
      return this.dom_elem.bind('move_node.jstree', (function(_this) {
        return function(event, data) {
          var cat_element, child, old_parent, order, target, target_element;
          cat_element = data.args[0].o;
          target_element = data.args[0].np;
          old_parent = data.args[0].op;
          _this.setNodeLoading(cat_element, true);
          if (_this.dom_elem.is(target_element)) {
            target = "root";
          } else {
            target = _this.getCategoryId(target_element);
          }
          order = (function() {
            var _i, _len, _ref, _results;
            _ref = this.getChildren(target_element);
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              child = _ref[_i];
              _results.push(this.getCategoryId($(child)));
            }
            return _results;
          }).call(_this);
          return $.ajax({
            url: 'ajax/category_move.php',
            type: 'post',
            dataType: 'json',
            data: {
              mode: 'move',
              cat: _this.getCategoryId(cat_element),
              target: _this.getCategoryId(target_element),
              order: order
            },
            success: function(data) {
              var cat_id, sort, _ref, _results;
              _this.setNodeLoading(cat_element, false);
              if (data === "false" || ((data.move != null) && data.move === "false")) {
                _this.notifications.showError(lang.error_move_category);
                return _this.reloadTree();
              } else if ((data.move != null) && data.order === "false") {
                return _this.reloadTree();
              } else {
                _ref = data.order;
                _results = [];
                for (cat_id in _ref) {
                  sort = _ref[cat_id];
                  _results.push(_this.changeNodeSort(_this.dom_elem.find($.escapeId("#node_" + cat_id)), sort));
                }
                return _results;
              }
            }
          });
        };
      })(this));
    };

    CategoryTree.prototype.addListeners = function() {
      $('#tree_close_all input[type="button"]').bind('click', (function(_this) {
        return function() {
          _this.dom_elem.jstree("close_all", -1);
          return false;
        };
      })(this));
      this.dom_elem.bind('loaded.jstree refresh.jstree', (function(_this) {
        return function(event, data) {
          var el, _i, _len, _ref;
          _ref = _this.dom_elem.find("li");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            el = _ref[_i];
            _this.changeNodeSort(el);
          }
          return _this.applyDynamicUpdating();
        };
      })(this));
      this.dom_elem.bind('select_node.jstree', (function(_this) {
        return function(event, data) {
          var elem;
          elem = data.args[0];
          if (_this.getCategoryId($(elem)) === "root") {
            return _this.catdetails.showDetails(false);
          } else {
            return _this.catdetails.showDetails(_this.getCategoryId($(elem)));
          }
        };
      })(this));
      this.dom_elem.bind('create.jstree', (function(_this) {
        return function(event, data) {
          var node;
          node = data.rslt;
          _this.setNodeLoading(node.obj, true);
          return $.ajax({
            url: 'ajax/category_move.php',
            type: 'post',
            dataType: 'json',
            data: {
              mode: 'add',
              name: node.name,
              cat: _this.getCategoryId(data.args[0])
            },
            success: function(data) {
              _this.setNodeLoading(node.obj, false);
              if ((data == null) || data === "false") {
                _this.reloadTree();
                return _this.notifications.showError(lang.error_add_category);
              } else {
                node.obj.attr('id', "node_" + data.id);
                _this.updateNode(data.id, {
                  sort: data.sort,
                  hidden: data.hidden,
                  active: data.active
                });
                _this.applyDynamicUpdating();
                return $(node.obj).find("a").trigger("click");
              }
            }
          });
        };
      })(this));
      return $('#tree_search').typeWatch({
        callback: (function(_this) {
          return function(data, elem) {
            var endtime, starttime;
            _this.loading.category_tree = true;
            starttime = new Date().getTime();
            _this.dom_elem.jstree("search", data);
            endtime = new Date().getTime();
            console.log("Time to search the tree: " + (endtime - starttime) + " ms");
            _this.showSubtree($(".jstree-search"));
            _this.highlightCategories;
            return _this.loading.category_tree = false;
          };
        })(this),
        wait: 600,
        highlight: true,
        captureLength: 0
      });
    };

    CategoryTree.prototype.addContextMenu = function() {
      var contextmenu_items;
      contextmenu_items = {
        "add": {
          name: lang.contextmenu_add,
          icon: "plus"
        },
        "delete": {
          name: lang.contextmenu_delete,
          icon: "trash"
        },
        "sep1": "---------",
        "quit": {
          name: lang.contextmenu_quit,
          icon: "remove"
        }
      };
      return $.contextMenu({
        selector: "" + this.dom_elem.selector + " li a",
        build: (function(_this) {
          return function(trigger, event) {
            var contextmenu_items_tmp;
            contextmenu_items_tmp = {};
            $.extend(true, contextmenu_items_tmp, contextmenu_items);
            if (_this.getChildren($(trigger)).length !== 0) {
              contextmenu_items_tmp["delete"].disabled = true;
            }
            return {
              callback: function(key, options) {
                var newcat, node;
                node = options.$trigger.parent("li");
                newcat = options.$trigger.parent("li").attr('id').substr(5);
                if (key === "quit") {
                  return true;
                } else {
                  if (key === "add") {
                    console.log(node);
                    return _this.dom_elem.jstree("create", node, "last", lang.tree_newnode);
                  } else if (key === "delete") {
                    _this.setNodeLoading(node, true);
                    return $.ajax({
                      url: "ajax/category_move.php",
                      type: 'post',
                      dataType: 'json',
                      data: {
                        mode: 'delete',
                        cat: newcat
                      },
                      success: function(data) {
                        if (data === "true") {
                          return _this.dom_elem.jstree("remove", node);
                        } else {
                          _this.notifications.showError(lang.error_delete_category);
                          return _this.setNodeLoading(node, false);
                        }
                      }
                    });
                  }
                }
              },
              items: contextmenu_items_tmp
            };
          };
        })(this)
      });
    };

    CategoryTree.prototype.updateNode = function(cat_id, opts) {
      var el;
      el = this.dom_elem.find($.escapeId("#node_" + cat_id));
      if (opts.sort != null) {
        this.changeNodeSort(el, opts.sort);
      }
      if (opts.hidden != null) {
        if (!!opts.hidden) {
          el.addClass("category_hidden");
        } else {
          el.removeClass("category_hidden");
        }
      }
      if (opts.active != null) {
        if (opts.active) {
          el.removeClass("category_inactive");
        } else {
          el.addClass("category_inactive");
        }
      }
      if (opts.title != null) {
        return this.dom_elem.jstree('rename_node', el, opts.title);
      }
    };

    CategoryTree.prototype.changeNodeSort = function(node, sort) {
      var el, sorttext;
      if (sort == null) {
        sort = void 0;
      }
      el = $(node).children("li a");
      if (sort != null) {
        sorttext = sort;
        $(node).data("sort", sorttext);
      } else {
        sorttext = $(node).data("sort");
      }
      if (el.children(".sort").length === 0) {
        el.html(el.html() + "<span class='sort'>" + sorttext + "</span>");
      } else {
        el.children(".sort").text(sort);
      }
      if (sort != null) {
        return this.dom_elem.jstree("sort", this.dom_elem.children("ul"));
      }
    };

    CategoryTree.prototype.reloadTree = function() {
      console.log("reload");
      return this.dom_elem.jstree("refresh");
    };

    CategoryTree.prototype.setNodeLoading = function(node, state) {
      var status;
      status = state ? "loading" : "default";
      return this.dom_elem.jstree("set_type", status, node.jstree("get_id"));
    };

    CategoryTree.prototype.getCategoryId = function(node) {
      if (node.is("a")) {
        node = node.parent("li");
      }
      return $(node).attr('id').substr(5);
    };

    CategoryTree.prototype.getChildren = function(node) {
      if (node.is("a")) {
        node = node.parent("li");
      }
      return node.children('ul').children('li');
    };

    CategoryTree.prototype.showSubtree = function(elem) {
      var correctNode;
      correctNode = function(elem) {
        var child, children, last, _i, _len, _results;
        last = elem.children("li").eq(-1);
        last.addClass("jstree-last");
        children = elem.children("li");
        _results = [];
        for (_i = 0, _len = children.length; _i < _len; _i++) {
          child = children[_i];
          _results.push(correctNode($(child).children("ul:first")));
        }
        return _results;
      };
      elem.siblings("ul:first").find("li").show();
      return correctNode(elem.siblings("ul:first"));
    };

    CategoryTree.prototype.getParentsNames = function(cat_id) {
      var names, node, _i, _len, _ref;
      cat_id = $.escapeId(cat_id);
      names = [];
      _ref = $("#node_" + cat_id).add($("#node_" + cat_id).parents().filter("li"));
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        names.push($.trim($(node).children("a").text()));
      }
      return names;
    };

    CategoryTree.prototype.applyDynamicUpdating = function() {
      if (!this.dynamic_sorting) {
        return $(".sort").show();
      }
    };

    CategoryTree.prototype.deselectAll = function() {
      return this.dom_elem.jstree("deselect_all");
    };

    return CategoryTree;

  })();

}).call(this);
